%\VignetteIndexEntry{Conversion of R regression output to LaTeX tables}
%\VignetteDepends{}
%\VignetteKeywords{regression, table, LaTeX, typesetting}
%\VignettePackage{texreg}
\documentclass[a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{booktabs}
\usepackage{dcolumn}
\usepackage{rotating}
\usepackage{longtable}
\usepackage{geometry}
\geometry{margin=3cm}
\usepackage[pdfpagelabels,bookmarks]{hyperref}
\hypersetup{
  pdftitle={texreg},
  pdfauthor={Philip Leifeld},
  pdfsubject={R package vignette},
  breaklinks=true,
  colorlinks=true,
  urlcolor=blue,
  linkcolor=blue,
  citecolor=red,
  bookmarksnumbered
}

\title{texreg: Conversion of R regression output to \LaTeX\ tables}
\author{Philip Leifeld $<$\href{mailto:philip.leifeld@eawag.ch}{philip.leifeld@eawag.ch}$>$}

\begin{document}

\maketitle

\section{Motivation}
The texreg package for the statistical computing environment R was designed to convert regression model output from multiple models into tables for inclusion in \LaTeX\ documents.
It is an alternative to packages like \texttt{xtable}, \texttt{apsrtable}, \texttt{outreg}, \texttt{stargazer} and \texttt{memisc}, which can also convert R tables to \LaTeX\ tables.
Only a subset of these packages is able to merge multiple regression models in a single table.
Those packages which can do this do not support important model types such as \texttt{lme} or \texttt{mer} (linear mixed effects models) and \texttt{ergm} objects (exponential random graph models from the \href{http://www.statnet.org}{statnet} suite of packages).
texreg, in contrast, accepts these model types and can also merge multiple models in a single table.
Currently supported model types are listed in table \ref{tab:types}.
New model types can be easily implemented (see section \ref{templates}).
texreg can be used within Sweave and knitr.
\LaTeX\ packages for creating fancy tables, like \texttt{dcolumn} or \texttt{booktabs}, are supported.

\begin{table}[t]
\begin{center}
\begin{tabular}{l l l l l}
\toprule
Class			& Package			& Added		& Description \\
\midrule
\texttt{clm}		& \texttt{ordinal}		& 2012-10-12	& Cumulative link models \\
\texttt{clogit}		& \texttt{survival}		& 2012-09-30	& Conditional logistic regression \\
\texttt{coxph}		& \texttt{survival}		& 2012-10-14	& Cox proportional hazard models \\
\texttt{coxph.penal}	& \texttt{survival}		& 2012-12-04	& Cox proportional hazard models with penalty splines \\
\texttt{dynml}		& \texttt{dynlm}		& 2013-02-14	& Time series regression with ``ts'' data \\
\texttt{ergm}		& \texttt{ergm}			& 2012-06-18	& Exponential random graph models \\
\texttt{gee}		& \texttt{gee}			& 2012-10-14	& Generalized estimation equation \\
\texttt{glm}		& \texttt{stats}		& 2012-06-19	& Generalized linear models \\
\texttt{glmerMod}	& \texttt{lme4} (new)		& 2012-10-09	& Generalized linear mixed models \\
\texttt{gls}		& \texttt{nlme}			& 2012-06-19	& Generalized least squares \\
\texttt{gmm}		& \texttt{gmm}			& 2013-02-06	& Generalized method of moments estimation \\
\texttt{lm}		& \texttt{stats}		& 2012-06-19	& Ordinary least squares \\
\texttt{lme}		& \texttt{nlme}			& 2012-06-19	& Linear mixed-effects models \\
\texttt{lmerMod}	& \texttt{lme4} (new)		& 2012-10-08	& Linear mixed-effects models \\
\texttt{lmrob}		& \texttt{robustbase}		& 2012-11-12	& MM-type estimators for linear models \\
\texttt{lnam}		& \texttt{sna}			& 2012-10-07	& Linear network autocorrelation models \\
\texttt{mer}		& \texttt{lme4} (old)		& 2012-10-08	& Linear mixed-effects models \\
\texttt{negbin}		& \texttt{MASS}			& 2012-10-15	& Negative binomial generalized linear models \\
\texttt{nlmerMod}	& \texttt{lme4} (new)		& 2012-10-09	& Nonlinear mixed-effects models \\
\texttt{lrm}		& \texttt{rms}, \texttt{Design}	& 2012-07-04	& Logistic regression models \\
\texttt{plm}		& \texttt{plm}			& 2012-08-01	& Linear models for panel data \\
\texttt{pmg}		& \texttt{plm}			& 2012-08-01	& Linear panel models with heterogeneous coefficients \\
\texttt{polr}		& \texttt{MASS}			& 2012-10-12	& Ordered logistic or probit regression \\
\texttt{Relogit}	& \texttt{Zelig}		& 2012-10-14	& Rare events logistic regression \\
\texttt{rlm}		& \texttt{MASS}			& 2012-11-12	& Robust fitting of linear models \\
\texttt{rq}		& \texttt{quantreg}		& 2012-08-01	& Quantile regression models \\
\texttt{sclm}		& \texttt{ordinal}		& 2012-10-12	& Cumulative link models \\
\texttt{simex}		& \texttt{simex}		& 2012-10-15	& SIMEX algorithm for measurement error models \\
\texttt{stergm}		& \texttt{tergm}		& 2012-10-23	& Separable temporal exponential random graph models \\
\texttt{svyglm}		& \texttt{survey}		& 2012-10-14	& Survey-weighted generalized linear models \\
\texttt{systemfit}	& \texttt{systemfit}		& 2012-10-03	& Linear structural equations \\
\texttt{tobit}		& \texttt{AER}			& 2012-10-15	& Tobit regression models for censored data \\
\bottomrule
\end{tabular}
\end{center}
\caption{List of currently supported model types}
\label{tab:types}
\end{table}

Beside \LaTeX\ output, texreg can also export nicely formatted tables to MS Word files, HTML files (which can be viewed in any web browser), or it can print nicely formatted regression tables directly to the screen (that is, to the R console) for easier model comparison.

\section{Installation}\label{installation}
It should be possible to install texreg using a simple command:
<<results=hide, eval=FALSE>>=
install.packages("texreg")
@
The most recent version can always be installed with this command (usually more recent than the CRAN version in the previous command):
<<results=hide, eval=FALSE>>=
install.packages("texreg", repos="http://R-Forge.R-project.org")
@
If this is not possible for some reason, the source files and binaries can be downloaded from \url{http://r-forge.r-project.org/projects/texreg/} (click on ``R packages'').
To load the package in R once it has been installed, enter the following command:
<<results=hide>>=
library(texreg)
@
The package can be updated to the most recent version by typing:
<<results=hide, eval=FALSE>>=
update.packages("texreg", repos="http://R-Forge.R-project.org")
@
If the file is not available on the R-Forge repository, you can try to download it from the R-Forge project homepage (\url{http://r-forge.r-project.org/projects/texreg/}; click on ``R packages'') and install it manually by entering something like \verb+R CMD INSTALL texreg_1.xx.tar.gz+ (replace \texttt{xx} by the current version number) on the terminal (not the R terminal, but the normal command line of your operating system).

\section{Getting help}\label{help}
This R package vignette is part of the texreg package.
It can be displayed in R by entering the command:
<<results=hide>>=
vignette("texreg")
@
The help page of the package can be displayed as follows:
<<results=hide>>=
help(package="texreg")
@
More specific help on the \texttt{texreg} command can be obtained by entering the following command once the package has been loaded:
<<results=hide>>=
help(texreg)
@
If all else fails, more help can be obtained from the homepage of the texreg package.
Questions can be posted to a public forum at \url{http://r-forge.r-project.org/projects/texreg/}.

\section{texreg examples}
Suppose you fit two simple OLS models.
The following example was taken from the \texttt{lm()} help file.
<<>>=
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
weight <- c(ctl, trt)
m1 <- lm(weight ~ group)
m2 <- lm(weight ~ group - 1) # omitting intercept
@
The coefficients, standard errors, $p$ values etc. can be displayed as follows:
<<>>=
summary(m2)
@
Now it is fairly tedious to copy every single coefficient and standard error to a \LaTeX\ table when you design your academic paper.
To improve the situation, the following commands can do this automatically (the \LaTeX\ output code is shown below the R code, and the resulting table is shown in table \ref{tab:1}):
<<>>=
library(texreg)
texreg(m2)
@
<<echo=FALSE,results=tex>>=
texreg(m2, use.packages=FALSE, label="tab:1")
@

The resulting table is printed directly to the R console for easy copy \& paste.
It can also be returned as a character string and saved in an object, say \texttt{tab}, by adding the \texttt{return.string=TRUE} argument.
This way, it can be later printed again using the \texttt{cat()} function:
<<results=hide>>=
tab <- texreg(m2, return.string=TRUE)
cat(tab)
@
The \texttt{texreg} command also accepts multiple models as a \texttt{list} and merges them in a table.
The output of the following command is shown in table \ref{tab:2}.
<<eval=FALSE>>=
texreg(list(m1,m2))
@
<<results=tex,echo=FALSE>>=
texreg(list(m1,m2), use.packages=FALSE, label="tab:2")
@

The texreg package contains many customizations.
Among other options, the \texttt{use.packages} argument can be used to switch off package loading at the beginning of the table code.
Using the \texttt{label} argument, the label of the table can be set.
In a similar way, the \texttt{caption} argument takes care of the caption.
Activating the \texttt{scriptsize} option prints the table in a smaller font size.
The \texttt{sideways} argument rotates the table by 90 degrees and uses the \texttt{rotating} package and the \texttt{sidewaystable} environment.
The position of the table on the page or in the document can be specified using the \texttt{float.pos} argument.
The \texttt{custom.names} and \texttt{model.names} arguments can be used to specify the names of the model terms and the models, respectively.
An example:
<<results=tex>>=
texreg(list(m1, m2), use.packages=FALSE, label="tab:3", 
  caption="My regression table", scriptsize=TRUE, 
  custom.names=c("(Intercept)", "Treatment", "Control"), 
  model.names=c("First model", "Second model"), float.pos="b")
@
The output of this command is shown as table \ref{tab:3}.
Another argument is \texttt{table}.
By deactivating it, the plain \texttt{tabular} environment is printed, and the whole table environment and header is omitted from the output.
This may be useful for integrating tables in Sweave, or for tweaking the floating environment of the table.
The \texttt{no.margin} argument can be used to control the cell spacing of the table.
If set to \texttt{TRUE}, regular margins are used.
By default, no margins are used in order not to waste any horizontal space on the page.

texreg employs functions from the \texttt{booktabs} and \texttt{dcolumn} packages to generate beautiful tables.
If these packages should not be used when generating tables, the arguments \texttt{booktabs} and \texttt{dcolumn}, respectively, can be set to \texttt{FALSE}.

The texreg package can also handle \texttt{ergm} objects (that is, exponential random graph models, which are used in social network analysis).
Here is an example:
the following code creates a network matrix.
<<>>=
mat <- rbinom(400,1,0.16)  #create a matrix
mat <- matrix(mat, nrow=20)
@
Using the \texttt{network} package, the matrix can be converted into a network object.
The \texttt{ergm()} command from the \texttt{ergm} package can be used to fit some models:
<<results=hide>>=
library(network)
library(ergm)
nw <- network(mat)
m4 <- ergm(nw ~ edges)
m5 <- ergm(nw ~ edges + mutual)
m6 <- ergm(nw ~ edges + mutual + twopath)
@
The texreg command can then be used to create a table with the coefficients.
Switching on \texttt{strong.signif} returns the significance levels used by the \texttt{ergm} package (three stars for $p$ values smaller than $0.001$ etc.) instead of using conventional significance stars:
<<results=tex>>=
texreg(list(m4, m5, m6), use.packages=FALSE, label="tab:4", scriptsize=FALSE, 
  strong.signif=TRUE)
@
Table \ref{tab:4} shows the result of this command.

Most academic journals require tables where the coefficient and the standard error are stored in two separate rows of the table, as shown in tables \ref{tab:1} to \ref{tab:4}.
In some situations, however, it makes sense to accommodate them in a single row.
The \texttt{single.row} argument can take care of this:
<<results=tex>>=
texreg(list(m4, m5, m6), use.packages=FALSE, label="tab:5", single.row=TRUE)
@
The result is shown in table \ref{tab:5}.
Note the difference between tables \ref{tab:4} and \ref{tab:5}.

The texreg command can also combine the output of different model types in a single table.
Consider the following example of an \texttt{lm} object, an \texttt{lme} (linear mixed-effects) model and an \texttt{ergm} object:
<<results=hide>>=
library(nlme)
m3 <- lme(distance ~ age + Sex, data = Orthodont, random = ~ 1)
@
<<results=tex>>=
texreg(list(m3, m2, m6), label="tab:6", use.packages=FALSE)
@
The output is shown in table \ref{tab:6}.
Note that different model types may report different kinds of goodness-of-fit statistics at the bottom of the table.

Many people use robust standard errors.
To include include them in a texreg table, the original standard errors can be replaced and new, custom values can be handed over.
To do this, the argument \verb+override.se+ can be used.
The argument expects a list of vectors, with one vector of standard errors for each model (which means that there should be as many elements in the list as there are models).
Beside standard errors, there are similar arguments for $p$ values (\verb+override.pval+) and coefficients (\verb+override.coef+).

\section{htmlreg and screenreg}
Tables can also be converted into HTML code instead of \LaTeX\ code using the following command:
<<results=hide>>=
htmlreg(list(m3, m2, m6))
@
The output of either of the two commands can be written directly to a file by adding the \texttt{file} argument.
This is especially handy because HTML files can be read by MS Word.
So it is possible to use the texreg package not only with \LaTeX, but also with MS Office.
An example:
<<results=hide>>=
htmlreg(list(m3, m2, m6), file="mytable.doc")
@
The \texttt{htmlreg()} function works well with the \texttt{knitr} package for dynamic HTML report generation.
In addition to HTML, \texttt{knitr} is also compatible with Markdown, a simplified markup language.
texreg can work with Markdown as well, but a couple of arguments should be provided to make it work:
the \verb+star.symbol="\\*"+ argument makes sure that Markdown does not interpret the significance stars as special Markdown syntax, and the \verb+doctype=FALSE+ argument makes sure that the HTML document type is not printed verbatim to the HTML file.
The additional \verb+align.center=TRUE+ argument centers the table horizontally on the page.
Here is an example (without printing the results because this vignette is not written in Markdown):
<<results=hide>>=
htmlreg(m3, doctype=FALSE, star.symbol="\\*", align.center=TRUE)
@
Finally, there is another function, which can print tables to the R console.
The command will nicely arrange the spaces etc. of your tables and will greatly facilitate model comparison:
<<>>=
screenreg(list(m3, m2, m6))
@

\section{Creating templates for new model types}\label{templates}
Implementing new kinds of statistical models is fairly easy (if you know how to modify R functions).
For any model type, there exists a function which extracts the relevant information from a model.
For example, \texttt{extract.lm()} provides coefficients and goodness-of-fit statistics for \texttt{lm} objects, \texttt{extract.ergm()} provides this information for \texttt{ergm} objects, etc.

You can get an overview of the model type you are interested in by fitting a model and examining the resulting object using the \texttt{str(model)} command, the \texttt{summary(model)} command, the \texttt{summary{model}\$coef} command, and related commands.
Any new extract function must retrieve the following data from a statistical model:
\begin{description}
 \item[coef.names] The names of the independent variables or coefficients.
 \item[coef] The actual coefficients. These values must be in the same order as the \texttt{coef.names}.
 \item[se] The standard errors, which will later be put in parentheses. These values must be in the same order as the \texttt{coef.names}.
 \item[pvalues] The $p$ values (\emph{optional}). They are used to add significance stars. These values must be in the same order as the \texttt{coef.names}.
 \item[gof.names] The names of some goodness-of-fit statistics to be added to the table. For example, the \texttt{extract.lm()} function extracts R$^2$, Adj.\ R$^2$ and Num.\ obs.
 \item[gof] A vector of goodness-of-fit statistics to be added to the table. These values must be in the same order as the \texttt{gof.names}.
 \item[gof.decimal] A vector of logical (boolean) values indicating for every GOF value whether the value should have decimal places in the output table (\emph{optional}). This is useful to avoid decimal places for the number of observations and similar count variables.
\end{description}

Once you have located all these data, you can create a \texttt{texreg} object and return it to the \texttt{texreg()} function.
The following code provides an example.
It shows the \texttt{extract.lm()} function:
\begin{verbatim}
extract.lm <- function(model, include.rsquared=TRUE, include.adjrs=TRUE, 
    include.nobs=TRUE, ...) {
  
  s <- summary(model, ...)                   # save the summary statistics
  
  names <- rownames(s$coef)                  # extract coefficient names
  co <- s$coef[,1]                           # extract the coefficient values
  se <- s$coef[,2]                           # extract the standard errors
  pval <- s$coef[,4]                         # extract the p-values
  
  rs <- s$r.squared                          # extract R-squared
  adj <- s$adj.r.squared                     # extract adjusted R-squared
  n <- nobs(model)                           # extract number of observations
  
  gof <- numeric()                           # create a vector for the GOFs
  gof.names <- character()                   # create a vector for the GOF names
  gof.decimal <- logical()                   # should the GOFs have dec. places?
  if (include.rsquared==TRUE) {              # if the user wants r-squared...
    gof <- c(gof, rs)                        # add it to the GOF list
    gof.names <- c(gof.names, "R$^2$")       # add its name to the list
    gof.decimal <- c(gof.decimal, TRUE)      # and make sure it has dec. places
  }
  if (include.adjrs==TRUE) {                 # same for adjusted r-squared
    gof <- c(gof, adj)
    gof.names <- c(gof.names, "Adj.\ R$^2$")
    gof.decimal <- c(gof.decimal, TRUE)
  }
  if (include.nobs==TRUE) {                  # same for number of observations
    gof <- c(gof, n)
    gof.names <- c(gof.names, "Num.\ obs.")
    gof.decimal <- c(gof.decimal, FALSE)     # but these are integer numbers
  }
  
  tr <- createTexreg(                        # create a texreg object
      coef.names=names, 
      coef=co, 
      se=se, 
      pvalues=pval,                          # p-values are only needed when
      gof.names=gof.names,                   # signif. stars shall be printed
      gof=gof, 
      gof.decimal=gof.decimal                # (optional)
  )
  return(tr)                                 # return texreg object to texreg
}
\end{verbatim}
After writing a custom function, the function has to be registered.
In other words, you have to tell the more general \texttt{extract} function that objects of the new class should be handled by using your custom function.
In the above example, this is achieved with the following code:
\begin{verbatim}
setMethod("extract", signature=className("lm", "stats"), 
    definition = extract.lm)
\end{verbatim}
Let's say you have written an extension for \texttt{clogit} objects called \texttt{extract.clogit()}.
The \texttt{clogit} command (and the corresponding class definition) can be found in the \texttt{survival} package.
Then you would have to adjust the code above as follows:
\begin{verbatim}
setMethod("extract", signature=className("clogit", "survival"), 
    definition = extract.clogit)
\end{verbatim}
After executing the definition of the function and the adjusted \texttt{setMethod} command, texreg can be used with your models.

If you write a new extract function and a \texttt{setMethod} configuration, it would be very helpful to post them in the forum (see section \ref{help}) in order to let other users profit from it.
If it works and if you can provide a self-contained example, the code can be implemented in a future version of texreg.
Please make sure that you do not modify anything else in the code, and that you stick to the formatting rules used in the remaining file; otherwise comparison with the original may be difficult.
Please send an inquiry if you are interested in joining the texreg project and working directly on the code.

\section{How to obtain the source code}\label{source}
If you would like to inspect the texreg source code in order to develop your own extensions, you can download the \texttt{.tar.gz} file from the repository homepage.
To do this, you can either search the list of R-Forge contributions (\url{http://download.r-forge.r-project.org/src/contrib/}) for texreg, or click on the ``R packages'' link on the texreg package homepage at R-Forge (\url{http://r-forge.r-project.org/projects/texreg/}).
Make sure you download the texreg file with the \texttt{.tar.gz} extension, open this compressed file (e.g., using 7Zip if you are on Windows), and open the \texttt{texreg.R} file in the \texttt{R/} directory.

\end{document}
